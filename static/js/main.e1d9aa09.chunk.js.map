{"version":3,"sources":["logo.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","giphyAPI","Giphy","colormap","interpolate","initialHistory","cards","12043","12045","12047","12049","12051","12053","12055","12057","12059","12107","12109","12347","12349","12351","12353","12355","12357","12359","12247","12249","12099","12101","12103","12105","1215x","1216x","1220x","141xx","149xx","12274","12277","12279","12305","12307","12309","defaultHistory","array2","array","Object","toConsumableArray","i","length","j","Math","floor","random","_ref","shuffleArray","keys","forEach","card","push","interval","due","right","wrong","value","JSON","parse","localStorage","e","getOrder","history","nexts","sort","a","b","known","filter","_ref2","unknown","_ref3","dueKnown","_ref4","Date","now","unDueKnown","_ref5","concat","getCurrCard","last","list","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","currentCard","state","interactionsCounter","lastCard","lastGuess","currentCardShow","replace","refreshGiphy","bind","assertThisInitialized","forceUpdate","reset","choose","chooseUp","chooseMiddle","chooseUnder","data","setState","giphy","image_url","_this2","document","addEventListener","window","event","keyCode","setInterval","dir","lastResult","_this$state","_history$find","find","_ref7","MULTIPLICATOR","newHistory","map","item","objectSpread","stringify","nextCard","nextCardShow","confirm","location","reload","_this$state2","react_default","createElement","className","src","style","height","minWidth","border","alt","key","backgroundColor","onClick","position","width","bottom","fontSize","react_flip_move_es","typeName","_ref8","color","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e1d9aa09.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.af3dde60.jpg\";","import React, { Component } from \"react\";\nimport FlipMove from \"react-flip-move\";\nimport Giphy from \"giphy-api\";\n\nimport interpolate from \"color-interpolate\";\nimport help from \"./logo.jpg\";\nimport \"./App.css\";\nimport \"animate.css/animate.css\";\n\nconst giphyAPI = Giphy();\n// const giphyAPI = Giphy(\"d0S7RpkmubyMya1J7upx8lvQoZ0jlZeO\");\n\nconst colormap = interpolate([\"red\", \"yellow\", \"green\"]);\nconst MITTE = \"➡️\";\nconst OBEN = \"⬆️\";\nconst UNTEN = \"⬇️\";\n\nconst MULTIPLICATOR = 3;\nconst initialInterval = 5000;\nfunction shuffleArray(array2) {\n  const array = [...array2];\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nconst cards = {\n  \"12043\": MITTE,\n  \"12045\": MITTE,\n  \"12047\": MITTE,\n  \"12049\": MITTE,\n  \"12051\": MITTE,\n  \"12053\": MITTE,\n  \"12055\": MITTE,\n  \"12057\": MITTE,\n  \"12059\": MITTE,\n  \"12107\": MITTE,\n  \"12109\": MITTE,\n  \"12347\": MITTE,\n  \"12349\": MITTE,\n  \"12351\": MITTE,\n  \"12353\": MITTE,\n  \"12355\": MITTE,\n  \"12357\": MITTE,\n  \"12359\": MITTE,\n  \"12247\": OBEN,\n  \"12249\": OBEN,\n  \"12099\": OBEN,\n  \"12101\": OBEN,\n  \"12103\": OBEN,\n  \"12105\": OBEN,\n  \"1215x\": OBEN,\n  \"1216x\": OBEN,\n  \"1220x\": OBEN,\n  \"141xx\": OBEN,\n  \"149xx\": UNTEN,\n  \"12274\": UNTEN,\n  \"12277\": UNTEN,\n  \"12279\": UNTEN,\n  \"12305\": UNTEN,\n  \"12307\": UNTEN,\n  \"12309\": UNTEN\n};\nconst RIGHT = \"RIGHT\";\nconst WRONG = \"WRONG\";\nlet defaultHistory = [];\nshuffleArray(Object.keys(cards)).forEach(card => {\n  defaultHistory.push({\n    interval: initialInterval,\n    due: 0,\n    card,\n    right: 0,\n    wrong: 0,\n    value: cards[card]\n  });\n});\n\nlet initialHistory;\ntry {\n  initialHistory = JSON.parse(localStorage[\"history\"]);\n} catch (e) {\n  initialHistory = defaultHistory;\n}\n\nconst getOrder = history => {\n  const nexts = history.sort((a, b) => a.due - b.due);\n  const known = nexts.filter(({ due }) => due > 0);\n  const unknown = nexts.filter(({ due }) => due === 0);\n  const dueKnown = known.filter(({ due }) => due < Date.now());\n  const unDueKnown = known.filter(({ due }) => due >= Date.now());\n  return [...dueKnown, ...unknown, ...unDueKnown];\n};\nconst getCurrCard = (history, last) => {\n  const list = getOrder(history);\n  if (last === list[0].card) return list[1].card;\n  return list[0].card;\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    const currentCard = getCurrCard(initialHistory);\n    this.state = {\n      interactionsCounter: 0,\n      history: initialHistory,\n      lastCard: \"\",\n      lastGuess: \"\",\n      currentCard,\n      currentCardShow: currentCard.replace(/x/g, () =>\n        Math.floor(Math.random() * 10)\n      )\n    };\n    this.refreshGiphy = this.refreshGiphy.bind(this);\n    this.forceUpdate = this.forceUpdate.bind(this);\n    this.reset = this.reset.bind(this);\n    this.choose = this.choose.bind(this);\n    this.chooseUp = this.chooseUp.bind(this);\n    this.chooseMiddle = this.chooseMiddle.bind(this);\n    this.chooseUnder = this.chooseUnder.bind(this);\n  }\n  async refreshGiphy() {\n    return;\n    if (!document.hasFocus()) return;\n    const { data } = await giphyAPI.random(\"beach\");\n    this.setState({ giphy: data.image_url });\n  }\n  componentDidMount() {\n    document.addEventListener(\"keyup\", e => {\n      e = e || window.event;\n      if (e.keyCode === 38) {\n        // up arrow\n        this.choose(OBEN);\n      } else if (e.keyCode === 40) {\n        // down arrow\n        this.choose(UNTEN);\n      } else if (e.keyCode === 37) {\n        // left arrow\n      } else if (e.keyCode === 39) {\n        this.choose(MITTE);\n      }\n    });\n    this.refreshGiphy();\n    setInterval(this.refreshGiphy, 120000);\n    setInterval(this.forceUpdate, 1000);\n  }\n  choose(dir) {\n    const { currentCard, history, interactionsCounter } = this.state;\n    let lastResult;\n    let { interval, right, wrong, value } = history.find(\n      ({ card }) => card === currentCard\n    );\n    let due = Date.now();\n    if (value === dir) {\n      interval *= MULTIPLICATOR * 0.8 + Math.random() * 0.4;\n      due += interval;\n      lastResult = RIGHT;\n      right++;\n    } else {\n      lastResult = WRONG;\n      interval /= MULTIPLICATOR * MULTIPLICATOR;\n      due += 3000;\n      wrong++;\n    }\n    const newHistory = history.map(item => {\n      if (item.card === currentCard)\n        return {\n          ...item,\n          interval,\n          due,\n          right,\n          wrong\n        };\n      return item;\n    });\n    localStorage[\"history\"] = JSON.stringify(newHistory, 0, 2);\n    const nextCard = getCurrCard(newHistory, currentCard);\n    const nextCardShow = nextCard.replace(/x/g, () =>\n      Math.floor(Math.random() * 10)\n    );\n    this.setState({\n      history: newHistory,\n      lastResult,\n      lastCard: currentCard,\n      currentCard: nextCard,\n      currentCardShow: nextCardShow,\n      lastGuess: dir,\n      interactionsCounter: interactionsCounter + 1\n    });\n  }\n  chooseUp() {\n    this.choose(OBEN);\n  }\n  chooseMiddle() {\n    this.choose(MITTE);\n  }\n  chooseUnder() {\n    this.choose(UNTEN);\n  }\n  reset() {\n    if (window.confirm(\"start over?\")) {\n      delete localStorage[\"history\"];\n      window.location.reload();\n    }\n  }\n\n  render() {\n    const {\n      currentCardShow,\n      lastGuess,\n      lastResult,\n      lastCard,\n      history,\n      giphy,\n      interactionsCounter\n    } = this.state;\n    return (\n      <div className=\"App\">\n        {giphy && (\n          <img\n            src={giphy}\n            style={{ height: 300, minWidth: 300, border: \"1px solid white\" }}\n            alt=\"\"\n          />\n        )}\n        <div>\n          {lastCard && (\n            <span\n              className={`last-card animated faster ${\n                lastResult === WRONG ? \"shake\" : \"jackInTheBox\"\n              }`}\n              key={`last-${interactionsCounter}`}\n            >\n              <div\n                className=\"last-result\"\n                style={{\n                  backgroundColor: lastResult === RIGHT ? \"green\" : \"red\"\n                }}\n              >\n                {lastGuess}\n                {lastResult}\n              </div>\n              {lastCard}\n              {cards[lastCard]}\n            </span>\n          )}\n          <span\n            className={`card animated faster lightSpeedIn animation-delay-200`}\n            key={`current-${interactionsCounter}`}\n          >\n            {currentCardShow}\n          </span>\n        </div>\n        <div className=\"buttons\">\n          <span onClick={this.chooseUp}>{OBEN}</span>\n          <span onClick={this.chooseMiddle}>{MITTE}</span>\n          <span onClick={this.chooseUnder}>️{UNTEN}</span>\n        </div>\n        <div\n          style={{\n            position: \"absolute\",\n            width: \"100%\",\n            bottom: 0,\n            fontSize: 12\n          }}\n        >\n          <button onClick={this.reset}>Restet</button>\n\n          <br />\n          <FlipMove typeName={null}>\n            {getOrder(history).map(({ card, right, wrong }) => {\n              let color = \"grey\";\n              if (right + wrong > 0) color = colormap(right / (right + wrong));\n              return (\n                <div key={card} style={{ color: \"white\" }}>\n                  <span style={{ color }}>{card} </span>\n                  {` = ${right} ✅ - ${wrong} ❌`}\n                </div>\n              );\n            })}\n          </FlipMove>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}